version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: duotime-postgres
    environment:
      POSTGRES_DB: duotime
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: vinh2004.
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - duotime-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d duotime"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: duotime-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - duotime-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass duotime2024
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Optional: Redis Commander for Redis GUI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: duotime-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:duotime2024
    ports:
      - "8081:8081"
    networks:
      - duotime-network
    depends_on:
      - redis
    restart: unless-stopped

  # Backend Application (Full Stack)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: duotime-backend
    env_file:
      - ./backend/.env.docker
    ports:
      - "3000:3000"
    networks:
      - duotime-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  duotime-network:
    driver: bridge 