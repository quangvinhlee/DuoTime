# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcceptPartnerBindingDto {
  invitationCode: String!
}

type AuthResponse {
  token: String!
}

input CreateLoveNoteInput {
  message: String!
  recipientId: String!
  title: String!
}

input CreatePartnerBindingDto {
  receiverId: String
}

input CreateReminderInput {
  description: String
  isRecurring: Boolean! = false
  recipientId: String
  recurringPattern: String
  scheduledAt: DateTime!
  targetType: ReminderTargetType! = FOR_ME
  title: String!
  type: ReminderType!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input GetLoveNotesInput {
  isRead: Boolean
  limit: Int! = 20
  offset: Int! = 0
}

input GetRemindersInput {
  limit: Int! = 20
  offset: Int! = 0
  targetType: ReminderTargetType
  type: ReminderType
}

input GoogleLoginInput {
  idToken: String!
  pushToken: String
}

type LoveNoteType {
  createdAt: DateTime!
  id: ID!
  isRead: Boolean!
  message: String!
  recipient: LoveNoteUserType
  recipientId: String!
  sender: LoveNoteUserType
  senderId: String!
  title: String
  updatedAt: DateTime!
}

type LoveNoteUserType {
  avatarUrl: String
  id: ID!
  name: String
}

type Mutation {
  acceptPartnerBinding(acceptPartnerBindingDto: AcceptPartnerBindingDto!): PartnerBindingResponse!
  createLoveNote(input: CreateLoveNoteInput!): LoveNoteType!
  createPartnerBinding(createPartnerBindingDto: CreatePartnerBindingDto!): PartnerBindingResponse!
  createReminder(input: CreateReminderInput!): ReminderGraphQLType!
  deleteAvatar: ResponseType!
  deleteLoveNote(loveNoteId: String!): ResponseType!
  deleteNotification(notificationId: String!): ResponseType!
  deleteReminder(reminderId: String!): ResponseType!
  googleLogin(googleLoginInput: GoogleLoginInput!): AuthResponse!
  markAllNotificationsAsRead: ResponseType!
  markLoveNoteAsRead(loveNoteId: String!): LoveNoteType!
  markNotificationAsRead(notificationId: String!): ResponseType!
  markReminderAsCompleted(reminderId: String!): ReminderGraphQLType!
  rejectPartnerBinding(rejectPartnerBindingDto: RejectPartnerBindingDto!): ResponseType!
  removePartner: ResponseType!
  renewToken(input: RenewTokenInput): AuthResponse!
  updateLoveNote(input: UpdateLoveNoteInput!, loveNoteId: String!): LoveNoteType!
  updateProfile(input: UpdateProfileInput!): ResponseType!
  updateReminder(input: UpdateReminderInput!, reminderId: String!): ReminderGraphQLType!
  uploadAvatar(input: UploadAvatarInput!): ResponseType!
}

type Notification {
  id: ID!
  isRead: Boolean!
  message: String!
  reminderId: String
  sentAt: DateTime!
  title: String!
  type: NotificationType!
  userId: String!
}

"""The type of notification"""
enum NotificationType {
  ACHIEVEMENT
  LOVE_NOTE
  PARTNER_ACTIVITY
  REMINDER
  SYSTEM
}

type PartnerBindingResponse {
  expiresAt: String!
  id: String!
  invitationCode: String!
  status: String!
}

type Query {
  getLoveNote(loveNoteId: String!): LoveNoteType!
  getLoveNotes(input: GetLoveNotesInput!): [LoveNoteType!]!
  getProfile: UserType!
  getReminder(reminderId: String!): ReminderGraphQLType!
  getReminders(input: GetRemindersInput!): [ReminderGraphQLType!]!
  getUnreadLoveNoteCount: Int!
  getUnreadNotificationCount: Int!
  getUserNotifications(limit: Int! = 20, offset: Int! = 0): [Notification!]!
  searchUsers(input: SearchUsersInput!): [UserType!]!
}

input RejectPartnerBindingDto {
  invitationCode: String!
}

type ReminderGraphQLType {
  createdAt: DateTime!
  createdBy: UserType
  createdById: String!
  description: String
  id: ID!
  isRecurring: Boolean!
  recipient: UserType
  recipientId: String
  recurringPattern: String
  scheduledAt: DateTime!
  status: ReminderStatus!
  targetType: ReminderTargetType!
  title: String!
  type: ReminderType!
  updatedAt: DateTime!
}

"""The status of a reminder"""
enum ReminderStatus {
  ACTIVE
  COMPLETED
}

"""Who the reminder is for"""
enum ReminderTargetType {
  FOR_BOTH
  FOR_ME
  FOR_PARTNER
}

"""The type of reminder"""
enum ReminderType {
  CELEBRATION
  CHORES
  DAILY
  DATE
  FAMILY
  GIFT
  HEALTH
  PERSONAL
  ROMANCE
  WORK
}

input RenewTokenInput {
  pushToken: String
}

type ResponseType {
  message: String!
  success: Boolean!
}

input SearchUsersInput {
  excludeUserId: String
  query: String!
}

type Subscription {
  notificationReceived: Notification!
}

input UpdateLoveNoteInput {
  isRead: Boolean
  message: String
  title: String
}

input UpdateProfileInput {
  name: String
}

input UpdateReminderInput {
  description: String
  isRecurring: Boolean
  recipientId: String
  recurringPattern: String
  scheduledAt: DateTime
  targetType: ReminderTargetType
  title: String
  type: ReminderType
}

input UploadAvatarInput {
  avatarBase64: String
  name: String
}

type UserType {
  avatarUrl: String
  createdAt: DateTime!
  email: String!
  googleId: String!
  id: String!
  name: String
  partner: UserType
  partnerId: String
  updatedAt: DateTime!
}